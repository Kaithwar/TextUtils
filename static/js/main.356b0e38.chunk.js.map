{"version":3,"sources":["components/Navbar.js","components/About.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","react_router_dom","to","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","placeholder","class","onClick","toggleMode","htmlFor","About","classNameName","aria-labelledby","data-bs-parent","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","Mode","setMode","body","style","backgroundColor","color","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.356b0e38.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">TextUtils</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary me-5\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div class={`form-check form-switch text-${props.mode === 'light'? 'dark': 'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'light'? 'dark': 'light'} Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n    \r\n    // const [myStyle, setMystyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n\r\n    // const [btntext, setbtntext] = useState(\"Dark mode\")\r\n\r\n    // const toggleStyle = () =>{\r\n    //     if(props.mode === 'light'){\r\n    //         setMystyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         // setbtntext(\"Light mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMystyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         // setbtntext(\"Dark mode\")\r\n    //     }\r\n    // }\r\n    \r\n\r\n  return (\r\n    <div classNameName='container' >\r\n        <h1 classNameName='my-3'>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" type=\"button\"  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" >\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\"  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" >\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\"  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" >\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {/* <div className=\"container my-3\">\r\n        <button className=\"btn btn-primary\" onClick={toggleStyle}>{btntext}</button>\r\n        </div> */}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const UpClick = () =>{\r\n        // console.log(\"UpperCase was Clicked \" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n    const lwClick = () =>{\r\n        // console.log(\"UpperCase was Clicked \" + text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n    const Clear = () =>{\r\n        setText('')\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n        var text = document.getElementById(\"mybox1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('')\r\n  return (\r\n    <>\r\n    <div className=\"container my-2\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <label htmlFor=\"mybox\" className=\"form-label\">Email address</label>\r\n            <input type=\"email\" className=\"form-control\" id=\"mybox\" placeholder=\"name@example.com\"/>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n            <label htmlFor=\"mybox\" className=\"form-label\">Enter your text</label>\r\n            <textarea className=\"form-control\" id=\"mybox1\" value={text} onChange={handleOnChange} rows=\"8\" placeholder='Enter your text'></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={UpClick}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={lwClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={Clear}>Clear</button>\r\n        <br/>\r\n        <button className=\"btn btn-primary m-2\" onClick={handleExtraSpaces}>Remove Extra spaces</button>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n        <h2>Your text Summary:</h2>\r\n        <p>{text.split(\" \").length -1} words and {text.length} characters</p>\r\n        <p>{0.008 * (text.split(\" \").length-1)} Minutes take to read </p>\r\n        <div className='border border-secondary p-4 rounded'>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in above box to preview it.\"}</p>\r\n        </div>\r\n    </div>\r\n    </>\r\n    \r\n  )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Textform from './components/Textform';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n\n  const toggleMode = () => {\n    if(Mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#282c30d6';\n      document.body.style.color = 'white';\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n    }\n  }\n  return (\n    <>\n      <Router>\n      <Navbar mode={Mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        <Routes>\n          <Route exact path=\"/about\" element={<About />}>  \n          </Route>\n          <Route exact path=\"/\" element={<Textform heading=\"Enter the text to Analyze\"/>}>    \n          </Route>\n        </Routes>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}